{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "3154e14b",
      "metadata": {
        "id": "3154e14b"
      },
      "source": [
        "# *Metodo del punto fijo*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "9d5e2287",
      "metadata": {
        "id": "9d5e2287"
      },
      "outputs": [],
      "source": [
        "from math import *\n",
        "import numpy as np\n",
        "import matplotlib . pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "db980446",
      "metadata": {
        "id": "db980446"
      },
      "outputs": [],
      "source": [
        "#Declaramos la funcion\n",
        "def funcion1(x):\n",
        "  #Se transformo la funcion para que estuviera en forma x=g(x)\n",
        "    return (x+1)**(1/3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "679a51af",
      "metadata": {
        "id": "679a51af"
      },
      "outputs": [],
      "source": [
        "# Ingreso los datos por el problema\n",
        "p=1\n",
        "#uardamos los datos\n",
        "p0 = p\n",
        "#guarda valores iniciales del error y del número de iteraciones\n",
        "tol = 0.01 #float(input(\"Ingrese el valor de la tolerancia: \")) en este caso fue 10^-2\n",
        "nmax = 100 #float(input(\"Ingrese el número máximo de iteraciones: \"))\n",
        "error = 100\n",
        "niter = 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "id": "6b4c08a0",
      "metadata": {
        "id": "6b4c08a0",
        "outputId": "4b998798-4e36-48ac-a2b3-8fed4866298d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "# iter\t\t m \t\t f(m) \t\t error\n",
            "0 \t\t 1.0000 \t 1.2599 \t 100.0000\n",
            "1 \t\t 1.259921 \t 1.312294 \t 0.259921\n",
            "2 \t\t 1.312294 \t 1.322354 \t 0.052373\n",
            "3 \t\t 1.322354 \t 1.324269 \t 0.010060\n",
            "4 \t\t 1.324269 \t 1.324633 \t 0.001915\n",
            "La raíz de la función dada en el intervalo [1.0000,1.3242687\n"
          ]
        }
      ],
      "source": [
        "# Método del punto fijo\n",
        "\n",
        "# Evaluo primer valor, m seria 1\n",
        "m = p0\n",
        "\n",
        "#Evaluacion de la función en los puntos m\n",
        "fm = funcion1(m)\n",
        "\n",
        "print(\"# iter\\t\\t m \\t\\t f(m) \\t\\t error\")\n",
        "print(\"{0} \\t\\t {1:6.4f} \\t {2:6.4f} \\t {3:6.4f}\".format(niter, m, fm, error ))\n",
        "\n",
        "# ciclo iterativo\n",
        "while error > tol and niter < nmax:\n",
        "    m = funcion1(m)\n",
        "    fm = funcion1(m)\n",
        "    error = abs(m - p )\n",
        "    niter += 1\n",
        "    print(\"{0} \\t\\t {1:6.6f} \\t {2:6.6f} \\t {3:6.6f}\".format(niter, m, fm, error ))\n",
        "    p=m\n",
        "print(\"La raíz de la función dada en el intervalo [{0:6.4f},{1:6.7f}\".format(p0 ,m))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b59ace03",
      "metadata": {
        "id": "b59ace03"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}